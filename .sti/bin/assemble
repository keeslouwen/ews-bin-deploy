#!/bin/sh

# Source code provided to STI is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

DEPLOY_DIR=$JWS_HOME/webapps

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
ARTIFACT_DIR=${ARTIFACT_DIR-target}

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all WAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/*.war $DEPLOY_DIR 2> /dev/null
  fi
}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
  fi

  echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

  echo "Maven version:"
  mvn --version

  # Execute the actual build
  mvn -e $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory
  # to the $DEPLOY_DIR directory for later deployment
  copy_artifacts "$ARTIFACT_DIR"

  # clean up after maven
  mvn clean
  if [ -d "$HOME/.m2/repository" ]; then
    rm -r "$HOME/.m2/repository"
  fi

  popd &> /dev/null
fi


# Copy (probably binary) artifacts from the deployments/
# directory to the $DEPLOY_DIR directory for later deployment
copy_artifacts "deployments"

  echo " KL - Custom code for binary deployment"
  mkdir $DEPLOY_DIR/OpenClinica
  mkdir $DEPLOY_DIR/OpenClinica-ws
   # Picks up WAR_FILE_URL from buildConfig
  echo ${WAR_FILE_URL1}
  curl -o ${DEPLOY_DIR}/OpenClinica/OpenClinica.war -O ${WAR_FILE_URL1}
  echo ${WAR_FILE_URL2}
  curl -o ${DEPLOY_DIR}/OpenClinica-ws/OpenClinica-ws.war -O ${WAR_FILE_URL2}
  echo "jar war so datainfo.properties can be updated before start in run"
  ls -ltr /opt/webserver
  cd $DEPLOY_DIR/OpenClinica
  jar xvf OpenClinica.war
  cd $DEPLOY_DIR/OpenClinica-ws
  jar xvf OpenClinica-ws.war
  
sed -i "/^dbHost=.*/c\dbHost=ocdbtst1" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^db=.*/c\db=openclinica" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^dbPort=.*/c\dbPort=$OCDBTST1_PORT_5432_TCP_PORT" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^userAccountNotification=.*/c\userAccountNotification=admin" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^# about\.text1=.*/c\about.text1= Powered by" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^# about\.text2=.*/c\about.text2= mosaic-greifswald.de" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^# supportURL=.*/c\supportURL=https://mosaic-greifswald.de/openclinica" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^collectStats=.*/c\collectStats=false" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
sed -i "/^designerURL=.*/c\designerURL=" $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties
cp $JWS_HOME/webapps/OpenClinica/WEB-INF/classes/datainfo.properties $JWS_HOME/webapps/OpenClinica-ws/WEB-INF/classes/datainfo.properties


if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."
  cp -v $LOCAL_SOURCE_DIR/configuration/* $JWS_HOME/conf/
fi
